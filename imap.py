import imaplib
import email
from email.header import decode_header
import json
import time

class SimpleGmailInboxLoader:
    def __init__(self, email_address, password):
        self.email_address = email_address
        self.password = password
        self.imap_server = "imap.gmail.com"
        self.imap_port = 993
        self.mail = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail IMAP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.mail = imaplib.IMAP4_SSL(self.imap_server, self.imap_port)
            self.mail.login(self.email_address, self.password)
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.email_address}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.mail:
            try:
                self.mail.close()
            except:
                pass
            self.mail.logout()
    
    def decode_mime_words(self, s):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ MIME –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        if not s:
            return ""
        decoded_string = ""
        for word, encoding in decode_header(s):
            if isinstance(word, bytes):
                try:
                    decoded_string += word.decode(encoding or 'utf-8')
                except:
                    decoded_string += word.decode('utf-8', errors='replace')
            else:
                decoded_string += word
        return decoded_string
    
    def get_message_body(self, msg):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        body = ""
        
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))
                
                if content_type == "text/plain" and "attachment" not in content_disposition:
                    try:
                        body = part.get_payload(decode=True).decode('utf-8')
                        break
                    except:
                        try:
                            body = part.get_payload(decode=True).decode('cp1251')
                            break
                        except:
                            try:
                                body = part.get_payload(decode=True).decode('utf-8', errors='replace')
                                break
                            except:
                                body = str(part.get_payload(decode=True))
                                break
        else:
            try:
                body = msg.get_payload(decode=True).decode('utf-8')
            except:
                try:
                    body = msg.get_payload(decode=True).decode('cp1251')
                except:
                    try:
                        body = msg.get_payload(decode=True).decode('utf-8', errors='replace')
                    except:
                        body = str(msg.get_payload(decode=True))
        
        return body
    
    def load_inbox_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–∞–ø–∫–∏ INBOX"""
        messages = []
        folder_name = "INBOX"
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É INBOX
            status, messages_count = self.mail.select(folder_name)
            
            if status != 'OK':
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É {folder_name} (—Å—Ç–∞—Ç—É—Å: {status})")
                return []
            
            total_messages = int(messages_count[0])
            print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {folder_name}: {total_messages}")
            
            if total_messages == 0:
                print(f"–ü–∞–ø–∫–∞ {folder_name} –ø—É—Å—Ç–∞")
                return []
            
            # –ò—â–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ INBOX
            status, message_ids = self.mail.search(None, "ALL")
            if status != 'OK':
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {folder_name}")
                return []
            
            message_ids = message_ids[0].split()
            print(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {folder_name}...")
            
            # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            processed_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for i, msg_id in enumerate(message_ids):
                try:
                    print(f"[{folder_name}] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(message_ids)}")
                    
                    status, msg_data = self.mail.fetch(msg_id, "(RFC822)")
                    if status == 'OK' and msg_data[0] is not None:
                        email_body = msg_data[0][1]
                        email_message = email.message_from_bytes(email_body)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        subject = self.decode_mime_words(email_message.get("Subject", ""))
                        sender = self.decode_mime_words(email_message.get("From", ""))
                        receiver = self.decode_mime_words(email_message.get("To", ""))
                        date = email_message.get("Date", "")
                        body = self.get_message_body(email_message)
                        
                        message_info = {
                            "id": msg_id.decode(),
                            "folder": folder_name,
                            "subject": subject,
                            "from": sender,
                            "to": receiver,
                            "date": date,
                            "body": body
                        }
                        
                        messages.append(message_info)
                        processed_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                        time.sleep(0.1)
                        
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} –∏–∑ {folder_name}")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1} –∏–∑ {folder_name}: {e}")
                    continue
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {folder_name}")
            return messages
            
        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ {folder_name}: {e}")
            return []


def main():
    # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    EMAIL = "test.server.composer@gmail.com"
    PASSWORD = "vigd xbrg ofcp zqma"  # –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    loader = SimpleGmailInboxLoader(EMAIL, PASSWORD)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if not loader.connect():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gmail")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ INBOX
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ INBOX...")
        inbox_messages = loader.load_inbox_messages()
        
        if inbox_messages:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            filename = "inbox_messages.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(inbox_messages, f, ensure_ascii=False, indent=2)
            
            print(f"\nüéâ –ì–û–¢–û–í–û! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(inbox_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ INBOX")
            print(f"üíæ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            print(f"\nüîç –ü–†–û–í–ï–†–ö–ê: –í JSON —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è {len(inbox_messages)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(inbox_messages) > 0:
                print(f"\nüìß –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
                for i, msg in enumerate(inbox_messages[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   {i+1}. –û—Ç: {msg['from']}")
                    print(f"      –¢–µ–º–∞: {msg['subject']}")
                    print(f"      –î–∞—Ç–∞: {msg['date']}")
                    print()
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ INBOX")
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        loader.disconnect()
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()